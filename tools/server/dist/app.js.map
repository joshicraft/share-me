{"version":3,"sources":["../src/app.js"],"names":["cfg","app","server","disconnect","console","log","close","events","process","on","e","mongoose","connection","err","serve","done","config","port","listen","connect","dbTestURL","useNewUrlParser","then","db","collection","start","use","bodyParser","json","index"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA;;AAEA;;;;;;kBAMe,UAACA,GAAD,EAAS;AACtB,MAAIC,YAAJ;AAAA,MACEC,eADF;AAEAF,QAAMA,OAAO,EAAb;AACA,MAAMG,aAAa,SAAbA,UAAa,GAAM;AACvBC,YAAQC,GAAR,CAAY,oBAAZ;AACA,WAAOH,OAAOI,KAAP,EAAP;AACD,GAHD;AAIA,MAAMC,SAAS,SAATA,MAAS,GAAM;AACnB;;AAEAC,YAAQC,EAAR,CAAW,SAAX,EAAsB,UAACC,CAAD,EAAO;AAC3BN,cAAQC,GAAR,CAAY,YAAYK,CAAxB;AACAP;AACD,KAHD;;AAKA;;;AAGAK,YAAQC,EAAR,CAAW,mBAAX,EAAgC,UAACC,CAAD,EAAO;AACrC;AACA;AACD,KAHD;;AAKA;AACAC,uBAASC,UAAT,CAAoBH,EAApB,CAAuB,WAAvB,EAAoC,YAAM;AACxCL,cAAQC,GAAR,CAAY,kCAAZ;AACD,KAFD;;AAIA;AACAM,uBAASC,UAAT,CAAoBH,EAApB,CAAuB,OAAvB,EAAgC,UAACI,GAAD,EAAS;AACvCT,cAAQC,GAAR,CAAY,wCAAwCQ,GAApD;AACD,KAFD;;AAIA;AACAF,uBAASC,UAAT,CAAoBH,EAApB,CAAuB,cAAvB,EAAuC,YAAM;AAC3CL,cAAQC,GAAR,CAAY,0CAAZ;AACD,KAFD;;AAIA;AACAG,YAAQC,EAAR,CAAW,QAAX,EAAqB,YAAM;AACzBE,yBAASC,UAAT,CAAoBN,KAApB,CAA0B,YAAM;AAC9BF,gBAAQC,GAAR,CAAY,kEAAZ;AACA;AACD,OAHD;AAID,KALD;AAMD,GAtCD;;AAwCA,WAASS,KAAT,CAAgBC,IAAhB,EAAsB;AACpBX,YAAQC,GAAR,CAAY,+BAA+BW,gBAAOd,MAAP,CAAce,IAAzD;AACA;;AAEA,WAAOhB,IAAIiB,MAAJ,CAAWF,gBAAOd,MAAP,CAAce,IAAzB,CAAP;AACA;;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,MAAME,UAAU,SAAVA,OAAU,CAACJ,IAAD,EAAU;AACxBR;;AAEA,WAAOI,mBAASQ,OAAT,CAAiBH,gBAAOd,MAAP,CAAckB,SAA/B,EAA0C;AAC/CC,uBAAiB;AAD8B,KAA1C,EAEJC,IAFI,CAEC;AAAA,aAAQR,MAAMC,IAAN,CAAR;AAAA,KAFD,CAAP;AAGD,GAND;;AAQA,SAAO;AACLQ,QAAIZ,mBAASC,UADR;AAELY,cAFK,sBAEOA,WAFP,EAEmB;AACtB,aAAOb,mBAASC,UAAT,CAAoBW,EAApB,CAAuBC,UAAvB,CAAkCA,WAAlC,CAAP;AACD,KAJI;AAKLlB,SALK,iBAKES,IALF,EAKQ;AACX,aAAOZ,WAAWY,IAAX,CAAP;AACD,KAPI;AAQLU,SARK,iBAQEV,IARF,EAQQ;AACXd,YAAM,wBAAN;AACAA,UAAIyB,GAAJ,CAAQ,sBAAO,UAAP,CAAR;AACAzB,UAAIyB,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACA3B,UAAIyB,GAAJ,CAAQ,qBAAR;AACAzB,UAAIyB,GAAJ,CAAQ,GAAR,EAAaG,gBAAb;AACA;AACAV,cAAQJ,IAAR;AACD;AAhBI,GAAP;AAkBD,C","file":"app.js","sourcesContent":["import config from '../../config/index'\r\nimport express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport cors from 'cors'\r\nimport morgan from 'morgan'\r\nimport mongoose from 'mongoose'\r\n\r\nimport index from './routes'\r\n\r\n// import seeder from './routes/seeder/seeder'\r\n\r\n/*\r\nMongo API KEY\r\nAPI Key:02698a63-6c54-45cd-bea7-336ca4064388\r\nDescription:Test Mongo Atlas API KEY\r\n */\r\n\r\nexport default (cfg) => {\r\n  let app,\r\n    server\r\n  cfg = cfg || {}\r\n  const disconnect = () => {\r\n    console.log('\\nServer Shut Down')\r\n    return server.close()\r\n  }\r\n  const events = () => {\r\n    // CONNECTION EVENTS\r\n\r\n    process.on('SIGTERM', (e) => {\r\n      console.log('SIGTERM' + e)\r\n      disconnect()\r\n    })\r\n\r\n    /*\r\n      Most server errors occur here\r\n     */\r\n    process.on('uncaughtException', (e) => {\r\n      // console.log(\"uncaughtException\" + e)\r\n      // disconnect()\r\n    })\r\n\r\n    // When successfully connected to db\r\n    mongoose.connection.on('connected', () => {\r\n      console.log('Mongoose default connection open')\r\n    })\r\n\r\n    // If the connection throws an error\r\n    mongoose.connection.on('error', (err) => {\r\n      console.log('Mongoose default connection error: ' + err)\r\n    })\r\n\r\n    // When the connection is disconnected\r\n    mongoose.connection.on('disconnected', () => {\r\n      console.log('Mongoose default connection disconnected')\r\n    })\r\n\r\n    // If the Node process ends, close the Mongoose connection\r\n    process.on('SIGINT', () => {\r\n      mongoose.connection.close(() => {\r\n        console.log('Mongoose default connection disconnected through app termination')\r\n        // process.exit(0);\r\n      })\r\n    })\r\n  }\r\n\r\n  function serve (done) {\r\n    console.log('Server Listening on port: ' + config.server.port)\r\n    // console.log(this.collection('result'))\r\n\r\n    return app.listen(config.server.port)\r\n    // return server = app.listen(config.server.port)\r\n\r\n    /*\r\n        Below is code to detect if port is running. Will likely need to address this at a later date.\r\n        Some sort of server management for tests might be good here so that when running tests or development we\r\n        wont need to manual spin up servers and use prexisiting ones. The same should be done for the client dev server.\r\n       */\r\n    // return detect(config.server.port)\r\n    //   .then(_port => {\r\n    //     if (config.server.port === _port) {\r\n    //       return server = app.listen(config.server.port)\r\n    //     } else {\r\n    //       console.log(`port: ${config.server.port} was occupied, try port: ${_port}`);\r\n    //     }\r\n    //   })\r\n    //   .catch(err => {\r\n    //     console.log(err);\r\n    //   });\r\n  }\r\n\r\n  const connect = (done) => {\r\n    events()\r\n\r\n    return mongoose.connect(config.server.dbTestURL, {\r\n      useNewUrlParser: true\r\n    }).then(done => serve(done))\r\n  }\r\n\r\n  return {\r\n    db: mongoose.connection,\r\n    collection (collection) {\r\n      return mongoose.connection.db.collection(collection)\r\n    },\r\n    close (done) {\r\n      return disconnect(done)\r\n    },\r\n    start (done) {\r\n      app = express()\r\n      app.use(morgan('combined'))\r\n      app.use(bodyParser.json())\r\n      app.use(cors())\r\n      app.use('/', index)\r\n      // app.use('/seeder', seeder)\r\n      connect(done)\r\n    }\r\n  }\r\n}\r\n"]}